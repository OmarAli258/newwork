// Sys.vm

// Test Sys.min: Computes the minimum of two values (4 and 2)
function Sys.init 0
    push constant 4       // Push 4 onto the stack
    push constant 2       // Push 2 onto the stack
    call Sys.min 2        // Call Sys.min with 2 arguments
    // After calling Sys.min, 2 should be at the top of the stack

    // Return to HALT
    goto HALT

// Sys.min: Computes the minimum of two values on the stack
function Sys.min 0
    pop temp 0  // Pop the second value (arg2)
    pop temp 1  // Pop the first value (arg1)
    push temp 1 // Push arg1
    push temp 0 // Push arg2
    lt          // Compare arg1 < arg2
    if-goto LESSER
    push temp 0 // Push arg2 (arg2 is smaller)
    return
label LESSER
    push temp 1 // Push arg1 (arg1 is smaller)
    return

// Test Sys.max: Computes the maximum of two values (4 and 2)
function Sys.init 0
    push constant 4       // Push 4 onto the stack
    push constant 2       // Push 2 onto the stack
    call Sys.max 2        // Call Sys.max with 2 arguments
    // After calling Sys.max, 4 should be at the top of the stack

    // Return to HALT
    goto HALT

// Sys.max: Computes the maximum of two values on the stack
function Sys.max 0
    pop temp 0  // Pop the second value (arg2)
    pop temp 1  // Pop the first value (arg1)
    push temp 1 // Push arg1
    push temp 0 // Push arg2
    gt          // Compare arg1 > arg2
    if-goto GREATER
    push temp 0 // Push arg2 (arg2 is larger)
    return
label GREATER
    push temp 1 // Push arg1 (arg1 is larger)
    return

// Test Sys.range: Computes the range of the array [3, 7, 1, 9, 4]
function Sys.init 0
    push constant 2048    // Address of the array (starting address of static memory)
    push constant 5       // Number of elements in the array
    call Sys.range 2      // Call Sys.range with the array address and number of elements
    // After calling Sys.range, 8 should be at the top of the stack (9 - 1 = 8)

    // Return to HALT
    goto HALT

// Sys.range: Computes the range of values in the array
function Sys.range 2
    // Check if n <= 1
    push argument 1
    push constant 1
    lt
    if-goto RETURN_ZERO

    // Initialize min and max with the first element
    push argument 0
    pop pointer 1    // Set THAT to the address of the first element
    push that 0      // Push the first element onto the stack
    pop local 0      // local 0 = min = array[0]
    push that 0      // Push the first element onto the stack again
    pop local 1      // local 1 = max = array[0]

    // Loop through the array to find min and max
    push constant 1
    pop temp 0       // temp 0 = i = 1
label LOOP
    // Check if i >= n
    push temp 0
    push argument 1
    lt              // i < n
    if-goto END_LOOP

    // Load array[i]
    push argument 0
    push temp 0
    add
    pop pointer 1    // Set THAT to the address of array[i]
    push that 0      // Push array[i] onto the stack

    // Update min
    push local 0
    call Sys.min 2
    pop local 0

    // Update max
    push local 1
    call Sys.max 2
    pop local 1

    // Increment i
    push temp 0
    push constant 1
    add
    pop temp 0
    goto LOOP

label END_LOOP
    // Compute range = max - min
    push local 1
    push local 0
    sub
    return

label RETURN_ZERO
    push constant 0
    return

// HALT label: Infinite loop to stop the program
label HALT
    goto HALT
